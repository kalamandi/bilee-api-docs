---
openapi: 3.1.0
info:
  version: 1.0.0
  title: Bilee Pay API
  contact:
    # name: Техническая поддержка
    # url: http://t.me/kalamandi
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: "logo.png"
    altText: Bilee Logo
  description: >
    # Введение

    После одобрения магазина Вам понадобится программист для настройки интеграции магазина с платёжной системой.
    Интеграция проходит с помощью **API** — программного интерфейса.

    Все запросы принимаются на URL `https://paymentgate.bilee.ru/api/${path}`

    ## Инструкции по безопасности

    Убедитесь, что вы используете последнюю версию API, а также генерируете и передаете корректную подпись для запросов, в которых она требуется.

    ## Подпись запроса

    Перед выполнением запроса MAPI проверяет, можно ли доверять его инициатору. Для этого сервер проверяет подпись запроса. В запросе должен добавлять подпись к каждому запросу, где это требуется.

      > В описании входных параметров для каждого метода указано, нужно ли подписывать запрос. Подпись формируется на основании тех полей, которые присутствуют в запросе, поэтому для каждого запроса она уникальна, и не совпадают никогда.

    Подпись в MAPI - это строка, в которой зашифрованы данные запроса с помощью пароля. Для создания подписи магазин использует `password`, который находится в разделе Настройки \> Интеграция

      Чтобы зашифровать данные запроса Магазин должен выполнить следующие шаги:

        1. Исключить `metadata` из объекта, а также `signature`, если проверяется валидность запроса
        2. Добавить в объект с телом запроса `password`
        3. Отсортировать ключи объекта в алфавитном порядке
        4. Конкатенировать (объеденить) только значения объекта в одну строку
        5. Применить к строке хеш-функцию SHA-256 (с поддержкой UTF-8)
        6. Добавить получившийся результат в значение параметра signature в тело запроса и отправить запрос

    ### Пример генерации подписи запроса `signature`:

    **JavaScript:**
      ```javascript
      (async() => {
        const data = {
          // some data
        };

        data.signature = await generateSignature(data, "PASSWORD_HERE");

        axios.post(url, data);
      })();

      async function generateSignature(data, password) {
        const tokenData = {
          ...data,
          password,
        };

        const excludedKeys = ["metadata", "signature"];

        const sortedTokenData = Object.keys(tokenData)
          .filter((key) => !excludedKeys.includes(key))
          .sort()
          .map((key) => tokenData[key])
          .join("");

        const encoder = new TextEncoder();
        const encodedData = encoder.encode(sortedTokenData);

        const hashBuffer = await crypto.subtle.digest("SHA-256", encodedData);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        const hashHex = hashArray
          .map((b) => b.toString(16).padStart(2, "0"))
          .join("");

        return hashHex;
      }
      ```

    ## Нотификация

    Bilee отправляет уведомления только об успешных платежах. Помимо получения текстового сообщения в Telegram, Вы можете настроить отправку http-уведомлений на Ваш сервер.
    Нотификация происходит синхронно посредством отправки `POST` запроса на `notify_url`

      В ответ сервер должен вернуть HttpCode **200**
    
      В противном случае Bilee пришлёт уведомление в Telegram, а также будет пытаться отправить уведомление раз в 15 минут следующие 24 часа
    
      Если ответ с кодом **200** так и не будет получен, уведомление отправится в дамп и больше приходить не будет

    При получении уведомления рекомендуется проверять его на достоверность с помощью:
     - Проверки IP адреса отправителя
     - Проверки подписи запроса

    ### Проверка IP адреса отправителя
      На данный момент уведомления отправляются с IP-адреса:
      - 31.129.97.143
      
        Об изменениях менеджер сообщит лично

    ### Проверка подписи запроса
      Для проверкаи подписи рассмотрим пример тела нотификации:

      ```
      {
        "id": 192,
        "uuid": "65754fb5-b001-47bf-a608-7333256e2abe",
        "order_id": "string",
        "amount": 100,
        "commission": 5,
        "final_amount": 105,
        "commission_amount": 5,
        "method_id": 1,
        "method_title": "2200***8402",
        "email": "customer@gmail.com",
        "description": "Заказ #jS9012C",
        "metadata": {},
        "shop_id": 190,
        "status": "confirmed",
        "success_url": "string",
        "fail_url": "string",
        "expires_at": null,
        "updated_at": "string",
        "created_at": "string"
        "signature": "0024a00af7c350a3a67ca168ce06502aa72772456662e38696d48b56ee9c97d9"
      },
      ```

    После этого следует сгенерировать подпись по инструкции, исключая параметр `signature`, и сравнить её со входящей:

    ### Пример функции валидации на JavaScript:
      ```
      const validateRequest = async (body) => {
        const validSignature = await generateSignature(body, "PASSWORD HERE");
        return validSignatire === body.signature;
      }
      ```
    ## Поддержка
      Если Вам требуется какая-либо техническая поддержка по работе нашего API, или же Вы хотите предложить идея, сообщить о недоработке - пишите в Telegram: [@nessrea](https://t.me/nessrea)
tags:
  - name: Платежи
    description: >
      # Статусы заказов
        | Значение  | Описание                                   |
        | --------  | --------                                   |
        | new       | Новый, не оплачен                          |
        | confirmed | Оплачен, деньги списаны с карты покупателя |
        | canceled  | Отменён. Оплата невозможно                 |
        | refunded  | Возвращён покупателю                       |  
x-tagGroups:
  - name: Приём платежей
    tags:
      - Платежи
servers:
  # - url: https://{tenant}/api/v1
  #   variables:
  #     tenant:
  #       default: www
  #       description: Your tenant id
  - url: https://paymentgate.bilee.ru/api
paths:
  "/payment/init":
    $ref: "paths/paymentInit.yaml"
  "/payment/getOrder":
    $ref: "paths/getOrder.yaml"
  "/payment/getState":
    $ref: "paths/getState.yaml"